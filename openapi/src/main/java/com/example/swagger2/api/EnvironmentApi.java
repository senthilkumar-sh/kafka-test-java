/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.swagger2.api;

import com.example.swagger2.model.Environment;
import com.example.swagger2.model.ModelApiResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-02T07:09:48.956959-05:00[America/Chicago]")
@Validated
@Tag(name = "Environment", description = "Environment setup")
public interface EnvironmentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /environment : Create a new environment on aws
     * Create a new environment on aws
     *
     * @param environment Create a new environment in the aws (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "createEnvironment",
        summary = "Create a new environment on aws",
        description = "Create a new environment on aws",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/environment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Environment> createEnvironment(
        @Parameter(name = "Environment", description = "Create a new environment in the aws", required = true) @Valid @RequestBody Environment environment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /environment/{envId} : Deletes an environment
     * delete a environment
     *
     * @param envId Environment id to delete (required)
     * @return Invalid environment value (status code 400)
     */
    @Operation(
        operationId = "deleteEnv",
        summary = "Deletes an environment",
        description = "delete a environment",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid environment value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/environment/{envId}"
    )
    
    default ResponseEntity<Void> deleteEnv(
        @Parameter(name = "envId", description = "Environment id to delete", required = true, in = ParameterIn.PATH) @PathVariable("envId") String envId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /environment/destroy : Destroy an environment
     * Destroy an environment
     *
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "destroyEnvironment",
        summary = "Destroy an environment",
        description = "Destroy an environment",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/environment/destroy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ModelApiResponse> destroyEnvironment(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /environment/destroy : Get all the destroyed environments
     * List all the components.
     *
     * @return successful operation (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "getAllDestroyedEnvs",
        summary = "Get all the destroyed environments",
        description = "List all the components.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Environment.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/environment/destroy",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Environment>> getAllDestroyedEnvs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" }, { \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /environment : Get all the environments
     * List all the components.
     *
     * @param environments Tags to filter by (optional)
     * @return successful operation (status code 200)
     *         or Invalid app (status code 400)
     */
    @Operation(
        operationId = "getAllEnvironments",
        summary = "Get all the environments",
        description = "List all the components.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Environment.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid app")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/environment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Environment>> getAllEnvironments(
        @Parameter(name = "environments", description = "Tags to filter by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "environments", required = false) List<String> environments
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" }, { \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /environment/{envId} : Find environment by ID
     * Returns a single environment
     *
     * @param envId ID of environment to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Environments not found (status code 404)
     */
    @Operation(
        operationId = "getEnvById",
        summary = "Find environment by ID",
        description = "Returns a single environment",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Environments not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/environment/{envId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Environment> getEnvById(
        @Parameter(name = "envId", description = "ID of environment to return", required = true, in = ParameterIn.PATH) @PathVariable("envId") Long envId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /environment : Update an existing environment
     * Update an existing environment by Id
     *
     * @param environment Update an existent environment in the aws (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "updateEnvironment",
        summary = "Update an existing environment",
        description = "Update an existing environment by Id",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Pet not found"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/environment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Environment> updateEnvironment(
        @Parameter(name = "Environment", description = "Update an existent environment in the aws", required = true) @Valid @RequestBody Environment environment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"awsAccount\" : \"abc\", \"appRelease\" : \"xyz-1.1\", \"namespace\" : \"xyz-ns\", \"id\" : \"uuid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
